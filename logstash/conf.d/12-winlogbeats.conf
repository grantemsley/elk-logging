filter {
    if [type] == "wineventlog" {
        # Remove ::ffff from IP addresses
        mutate {
            gsub => ["[event_data][IpAddress]", "::ffff:", ""]
        }

        # Drop logs we don't care about
        if [log_name] == "System" and [event_id] == 7036 and [event_data][param1] == "Windows Modules Installer" { drop {} } # Services starting/stopping that do it constantly as part of normal operation
        if [log_name] == "System" and [event_id] == 7036 and [event_data][param1] == "WinHTTP Web Proxy Auto-Discovery Service" { drop {} } # Services starting/stopping that do it constantly as part of normal operation
        if [log_name] == "System" and [event_id] == 7036 and [event_data][param1] == "Windows Update" { drop {} } # Services starting/stopping that do it constantly as part of normal operation
        if [log_name] == "System" and [event_id] == 7036 and [event_data][param1] == "Software Protection" { drop {} } # Services starting/stopping that do it constantly as part of normal operation
        if [log_name] == "System" and [event_id] == 7036 and [event_data][param1] == "Virtual Disk" { drop {} } # Services starting/stopping that do it constantly as part of normal operation
        if [log_name] == "System" and [event_id] == 7036 and [event_data][param1] == "Remote Registry" { drop {} } # Services starting/stopping that do it constantly as part of normal operation
        if [log_name] == "System" and [event_id] == 7036 and [event_data][param1] == "Optimize drives" { drop {} } # Services starting/stopping that do it constantly as part of normal operation
        if [log_name] == "System" and [event_id] == 7040 and [event_data][param1] == "Background Intelligent Transfer Service" { drop {} } # Service being set to on demand/auto, very spammy
        if [log_name] == "System" and [source_name] == "Virtual Disk Service" and ([event_id] == 3 or [event_id] == 4) { drop {} } # Virtual disk service starting/stopping
        if [log_name] == "System" and [event_id] == 1500 { drop {} } # Group policy processing
        if [log_name] == "System" and [event_id] == 1501 { drop {} } # Group policy processing
        if [log_name] == "System" and [source_name] == "EventLog" and [event_id] == 6013 { drop {} } # System uptime
        if [log_name] == "System" and [event_id] == 1 and [source_name] == "Microsoft-Windows-Kernel-General" { drop {} } # Time changing, due to NTP syncing
        if [log_name] == "Security" and [event_id] == 4616 and [event_data][SubjectUserName] == "LOCAL SERVICE" and [source_name] == "Microsoft-Windows-Security-Auditing" { drop {} } # Time changing, due to NTP syncing
        if [log_name] == "Security" and [event_id] == 5136 and [event_data][AttributeLDAPDisplayName] == "msPKIAccountCredentials" { drop {} } # msPKIAccountCredentials changes all the time due to certificate roaming, ignore it
        if [log_name] == "Security" and [event_id] == 5136 and [event_data][AttributeLDAPDisplayName] == "msPKIRoamingTimeStamp" { drop {} } # msPKIRoamingTimeStamp changes all the time due to certificate roaming, ignore it

        # Ignore logons from DWM-# and the like - they are part of the windows desktop manager in Windows 8 and up, not real logons. Even though they are logged as an interactive logon...
        if [log_name] == "Security" and [event_data][TargetDomainName] == "Window Manager" and [event_data][TargetUserName] =~ /^DWM-\d+$/ { drop {} }
        if [log_name] == "Security" and [event_data][TargetDomainName] == "Font Driver Host" and [event_data][TargetUserName] =~ /^UMFD-\d+$/ { drop {} }
        if [source_name] == "partmgr" and [event_id] == 58 { drop {} } # Disk signature of disk 1 = disk 0 - caused by VSS snapshots in VMs, not important

        # Ignore IPC$ and SYSVOL$ shares - they are accessed by everyone and generate a lot of noise
        if [log_name] == "Security" and [event_id] == 5140 and [event_data][ShareName] == "\\*\IPC$" { drop {} }
        if [log_name] == "Security" and [event_id] == 5140 and [event_data][ShareName] == "\\*\SYSVOL" { drop {} }
        if [log_name] == "Security" and [event_id] == 5140 and [event_data][ShareName] == "\\*\NETLOGON" { drop {} }
        if [log_name] == "Security" and [event_id] == 5140 and [event_data][ShareName] == "\\*\print$" { drop {} }
        
        # File access logs generate a lot of noise. Some of it might be useful for tracking down the origins of a virus though. This filters out some of the stuff that's probably part of normal windows operations.
        # Remove the ones for known processes like TiWorker.exe (windows update), ekrn.exe (ESET antivirus), etc.
        if [log_name] == "Security" and [event_id] == 4663 and [event_data][ProcessName] =~ /^C:\\Windows\\WinSxS\\.*\\TiWorker.exe$/ { drop {} }
        if [log_name] == "Security" and [event_id] == 4663 and [event_data][ProcessName] =~ /^C:\\Windows\\System32\\wbem\\WmiPrvSE.exe$/ { drop {} }
        if [log_name] == "Security" and [event_id] == 4663 and [event_data][ProcessName] =~ /^C:\\Windows\\System32\\SearchProtocolHost.exe$/ { drop {} }
        if [log_name] == "Security" and [event_id] == 4663 and [event_data][ProcessName] =~ /^C:\\Windows\\System32\\SearchIndexer.exe$/ { drop {} }
        if [log_name] == "Security" and [event_id] == 4663 and [event_data][ProcessName] =~ /^C:\\Windows\\System32\\poqexec.exe$/ { drop {} }
        if [log_name] == "Security" and [event_id] == 4663 and [event_data][ProcessName] =~ /^C:\\Windows\\Microsoft.NET\\Framework.*\\mscorsvw.exe$/ { drop {} }
        if [log_name] == "Security" and [event_id] == 4663 and [event_data][ProcessName] =~ /^C:\\Program Files\\ESET\\ESET Security\\ekrn\.exe$/ { drop {} }
        if [log_name] == "Security" and [event_id] == 4663 and [event_data][ProcessName] =~ /^C:\\Program Files.*\\Dropbox\\Client\\Dropbox.exe$/ { drop {} }
        if [log_name] == "Security" and [event_id] == 4663 and [event_data][ObjectName] =~ /^C:\\Windows\\System32\\dhcp/ { drop {} }
        
        # Don't care about plug and play for printers
        if [log_name] == "Security" and [event_id] == 6416 and [event_data][ClassName] == "PrintQueue" { drop {} }
        if [log_name] == "Security" and [event_id] == 6416 and [event_data][ClassName] == "Printer" { drop {} }
        if [log_name] == "Security" and [event_id] == 6416 and [event_data][ClassName] == "WSDPrintDevice" { drop {} }
        if [log_name] == "Security" and [event_id] == 6416 and [event_data][DeviceDescription] == "USB Printing Support" { drop {} }
        if [log_name] == "Security" and [event_id] == 6416 and [event_data][DeviceDescription] == "IPP Printer" { drop {} }
        if [log_name] == "Security" and [event_id] == 6416 and [event_data][DeviceDescription] == "HP Printer (Fax)" { drop {} }
        if [log_name] == "Security" and [event_id] == 6416 and [event_data][DeviceDescription] == "HP Printer (LEDM)" { drop {} }
        if [log_name] == "Security" and [event_id] == 6416 and [event_data][DeviceDescription] == "HP Printer (LEDM)" { drop {} }
        if [log_name] == "Security" and [event_id] == 6416 and [event_data][DeviceId] =~ /^USBPRINT\\.*$/ { drop {} }
        
        # Expected scheduled tasks - decided against dropping by folder, since bad stuff would be smart to hide itself deep in the folders of task scheduler
        # This is a pretty big list - windows has a lot of scheduled tasks
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\GoogleUpdateTaskMachineCore" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\GoogleUpdateTaskMachineUA" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Configuration Manager\Configuration Manager Health Evaluation" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Configuration Manager\Configuration Manager Idle Detection" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Configuration Manager\Configuration Manager Passport for Work Certificate Enrollment Task" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Office\Office Automatic Updates 2.0" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Office\Office ClickToRun Service Monitor" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Office\Office Feature Updates Logon" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Office\Office Feature Updates" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Office\Office Subscription Maintenance" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Office\OfficeBackgroundTaskHandlerLogon" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Office\OfficeTelemetryAgentFallBack2016" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Office\OfficeTelemetryAgentLogOn2016" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\.NET Framework\.NET Framework NGEN v4.0.30319 64" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\.NET Framework\.NET Framework NGEN v4.0.30319" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\AppID\PolicyConverter" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\AppID\VerifiedPublisherCertStoreCheck" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Application Experience\Microsoft Compatibility Appraiser" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Application Experience\ProgramDataUpdater" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\ApplicationData\CleanupTemporaryState" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\ApplicationData\DsSvcCleanup" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\CertificateServicesClient\SystemTask" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\CertificateServicesClient\UserTask" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\CertificateServicesClient\UserTask-Roam" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Chkdsk\ProactiveScan" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Customer Experience Improvement Program\Consolidator" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Customer Experience Improvement Program\Server\ServerCeipAssistant" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Customer Experience Improvement Program\UsbCeip" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Deduplication\BackgroundOptimization" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Defrag\ScheduledDefrag" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Device Information\Device" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\DeviceDirectoryClient\RegisterDevicePolicyChange" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\DeviceDirectoryClient\RegisterDeviceProtectionStateChanged" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\DiskCleanup\SilentCleanup" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\ExploitGuard\ExploitGuard MDM policy Refresh" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\InstallService\ScanForUpdates" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\InstallService\ScanForUpdatesAsUser" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\LanguageComponentsInstaller\ReconcileLanguageResources" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\License Manager\TempSignedLicenseExchange" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\MUI\LPRemove" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Management\Provisioning\Logon" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Plug and Play\Device Install Group Policy" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Power Efficiency Diagnostics\AnalyzeSystem" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\PushToInstall\Registration" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Registry\RegIdleBackup" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\RemoteAssistance\RemoteAssistanceTask" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Servicing\StartComponentCleanup" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\SettingSync\NetworkStateChangeTask" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Shell\IndexerAutomaticMaintenance" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Speech\SpeechModelDownloadTask" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Subscription\LicenseAcquisition" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\SystemRestore\SR" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\TPM\Tpm-HASCertRetr" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\TextServicesFramework\MsCtfMonitor" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Time Synchronization\SynchronizeTime" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Time Zone\SynchronizeTimeZone" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\UpdateOrchestrator\Schedule Scan" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Windows Error Reporting\QueueReporting" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\WindowsColorSystem\Calibration Loader" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\WindowsUpdate\Scheduled Start With Network" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\WindowsUpdate\Scheduled Start" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Wininet\CacheTask" { drop {} }
        if [source_name] == "Microsoft-Windows-TaskScheduler" and [event_id] == 201 and [event_data][TaskName] == "\Microsoft\Windows\Workplace Join\Automatic-Device-Join" { drop {} }

        
        

        # Handle security logs - clean up some event logs - remove the long full message so they don't eat up too much space and add short messages to make them easier to read
        if [log_name] == "Security" {
            if [event_id] == 4624 or [event_id] == 4634 {
                mutate {
                    remove_field => ["message"]
                    add_field => { "short_message" => "Logon Activity" }
                }
            }
            if [event_id] == 4625 {
                mutate {
                    remove_field => ['message']
                    add_field => { "short_message" => "Logon Failure" }
                }
            }
            if [event_id] == 4648 {
                mutate {
                    remove_field => ['message']
                    add_field => { "short_message" => "A logon was attempted using explicit credentials" }
                }
            }

            # User account management actions
            if [event_id] == 4720 { mutate { add_field => { "short_message" => "A user account was created"} } }
            if [event_id] == 4722 { mutate { add_field => { "short_message" => "A user account was enabled"} } }
            if [event_id] == 4723 { mutate { add_field => { "short_message" => "A user changed their own password"} } }
            if [event_id] == 4724 { mutate { add_field => { "short_message" => "An administrator reset password"} } }
            if [event_id] == 4725 { mutate { add_field => { "short_message" => "A user account was disabled"} } }
            if [event_id] == 4726 { mutate { add_field => { "short_message" => "A user account was deleted"} } }
            if [event_id] == 4738 { mutate { add_field => { "short_message" => "A user account was changed"} } }
            if [event_id] == 4740 { mutate { add_field => { "short_message" => "A user account was locked out"} } }
            if [event_id] == 4767 { mutate { add_field => { "short_message" => "A user account was unlocked"} } }
            if [event_id] == 4781 { 
                # For this one, also copy the OldTargetUserName to TargetUserName so it matches the other events better
                mutate { 
                    add_field => { "short_message" => "A username was changed"}
                    copy => { "[event_data][OldTargetUserName]" => "[event_data][TargetUserName]" }
                }
            }

            # Group management actions
            if [event_id] == 4764 { mutate { add_field => { "short_message" => "A group's type was changed"} } }

            if [event_id] == 4731 { mutate { add_field => { "short_message" => "A security-enabled local group was created"} } }
            if [event_id] == 4735 { mutate { add_field => { "short_message" => "A security-enabled local group was changed"} } }
            if [event_id] == 4734 { mutate { add_field => { "short_message" => "A security-enabled local group was deleted"} } }
            if [event_id] == 4732 { mutate { add_field => { "short_message" => "A member was added to a security-enabled local group"} } }
            if [event_id] == 4733 { mutate { add_field => { "short_message" => "A member was removed from a security-enabled local group"} } }

            if [event_id] == 4727 { mutate { add_field => { "short_message" => "A security-enabled global group was created"} } }
            if [event_id] == 4737 { mutate { add_field => { "short_message" => "A security-enabled global group was changed"} } }
            if [event_id] == 4730 { mutate { add_field => { "short_message" => "A security-enabled global group was deleted"} } }
            if [event_id] == 4728 { mutate { add_field => { "short_message" => "A member was added to a security-enabled global group"} } }
            if [event_id] == 4729 { mutate { add_field => { "short_message" => "A member was removed from a security-enabled global group"} } }

            if [event_id] == 4754 { mutate { add_field => { "short_message" => "A security-enabled universal group was created"} } }
            if [event_id] == 4755 { mutate { add_field => { "short_message" => "A security-enabled universal group was changed"} } }
            if [event_id] == 4758 { mutate { add_field => { "short_message" => "A security-enabled universal group was deleted"} } }
            if [event_id] == 4756 { mutate { add_field => { "short_message" => "A member was added to a security-enabled universal group"} } }
            if [event_id] == 4757 { mutate { add_field => { "short_message" => "A member was removed from a security-enabled universal group"} } }


            if [event_id] == 4744 { mutate { add_field => { "short_message" => "A local distribution group was created"} } }
            if [event_id] == 4745 { mutate { add_field => { "short_message" => "A local distribution group was changed"} } }
            if [event_id] == 4748 { mutate { add_field => { "short_message" => "A local distribution group was deleted"} } }
            if [event_id] == 4746 { mutate { add_field => { "short_message" => "A member was added to a local distribution group"} } }
            if [event_id] == 4747 { mutate { add_field => { "short_message" => "A member was removed from a local distribution group"} } }

            if [event_id] == 4749 { mutate { add_field => { "short_message" => "A global distribution group was created"} } }
            if [event_id] == 4750 { mutate { add_field => { "short_message" => "A global distribution group was changed"} } }
            if [event_id] == 4753 { mutate { add_field => { "short_message" => "A global distribution group was deleted"} } }
            if [event_id] == 4751 { mutate { add_field => { "short_message" => "A member was added to a global distribution group"} } }
            if [event_id] == 4752 { mutate { add_field => { "short_message" => "A member was removed from a global distribution group"} } }

            if [event_id] == 4759 { mutate { add_field => { "short_message" => "A universal distribution group was created"} } }
            if [event_id] == 4760 { mutate { add_field => { "short_message" => "A universal distribution group was changed"} } }
            if [event_id] == 4763 { mutate { add_field => { "short_message" => "A universal distribution group was deleted"} } }
            if [event_id] == 4761 { mutate { add_field => { "short_message" => "A member was added to a universal distribution group"} } }
            if [event_id] == 4762 { mutate { add_field => { "short_message" => "A member was removed from a universal distribution group"} } }


            # Misc other events
            if [event_id] == 5136 { mutate { add_field => { "short_message" => "A directory service object was modified"} } }
            if [event_id] == 5137 { mutate { add_field => { "short_message" => "A directory service object was created"} } }
            if [event_id] == 5139 { mutate { 
                add_field => { "short_message" => "A directory service object was moved"}
                copy => { "[event_data][OldObjectDN]" => "[event_data][ObjectDN]" }
            } }
            if [event_id] == 5141 { mutate { add_field => { "short_message" => "A directory service object was deleted"} } }
            if [event_id] == 4768 { mutate { add_field => { "short_message" => "A kerberos authentication ticket was requested"} } }


            # Add logon type fields for event IDs 4624,4634,4525
            if [event_data][LogonType] == "2" { mutate { add_field => { "Method" => "Interactive - Keyboard" } } }
            if [event_data][LogonType] == "3" { mutate { add_field => { "Method" => "Network Logon" } } }
            if [event_data][LogonType] == "4" { mutate { add_field => { "Method" => "Batch - Scheduled Task" } } }
            if [event_data][LogonType] == "5" { mutate { add_field => { "Method" => "Service Account" } } }
            if [event_data][LogonType] == "7" { mutate { add_field => { "Method" => "Unlock System" } } }
            if [event_data][LogonType] == "8" { mutate { add_field => { "Method" => "NetworkCleartext" } } }
            if [event_data][LogonType] == "9" { mutate { add_field => { "Method" => "NewCredentials" } } }
            if [event_data][LogonType] == "10" { mutate { add_field => { "Method" => "RemoteInteractive" } } }
            if [event_data][LogonType] == "11" { mutate { add_field => { "Method" => "CachedInteractive" } } }
            if [event_data][LogonType] == "0" { mutate { add_field => { "Method" => "System Account" } } }

            # Add status for event IDs 4771, 4776, 4769, 4768
            if [event_data][Status] == "0x0" { mutate { add_field => { "Statusmsg" => "Success" } } }
            if [event_data][Status] == "0x12" { mutate { add_field => { "Statusmsg" => "Account: disabled,expired,locked out,logon hours" } } }
            if [event_data][Status] == "0xB" { mutate { add_field => { "Statusmsg" => "Request start time is later than end time" } } }
            if [event_data][Status] == "0x17" { mutate { add_field => { "Statusmsg" => "Password has expired" } } }
            if [event_data][Status] == "0x18" { mutate { add_field => { "Statusmsg" => "Bad password" } } }
            if [event_data][Status] == "0x1b" { mutate { add_field => { "Statusmsg" => "Server principal valid for user-to-user only" } } }
            if [event_data][Status] == "0x1d" { mutate { add_field => { "Statusmsg" => "A service is not available" } } }
            if [event_data][Status] == "0x20" { mutate { add_field => { "Statusmsg" => "Ticket expired - frequently logged by computer accounts" } } }
            if [event_data][Status] == "0x25" { mutate { add_field => { "Statusmsg" => "Workstation's clock out of sync with DC" } } }
            if [event_data][Status] == "0x6" { mutate { add_field => { "Statusmsg" => "Username does not exist or has not replicated" } } }
            if [event_data][Status] == "0xc000006a" { mutate { add_field => { "Statusmsg" => "Incorrect password" } } }
            if [event_data][Status] == "0xc0000064" { mutate { add_field => { "Statusmsg" => "Username does not exist" } } }
            if [event_data][Status] == "0xc0000072" { mutate { add_field => { "Statusmsg" => "Account is disabled" } } }
            if [event_data][Status] == "0xc0000234" { mutate { add_field => { "Statusmsg" => "Account is locked out" } } }
            if [event_data][Status] == "0xc0000193" { mutate { add_field => { "Statusmsg" => "Account expired" } } }
            if [event_data][Status] == "0xc000006f" { mutate { add_field => { "Statusmsg" => "Logon outside hours" } } }
            if [event_data][Status] == "0xc0000224" { mutate { add_field => { "Statusmsg" => "User required to change password next time" } } }
            if [event_data][Status] == "0xc0000071" { mutate { add_field => { "Statusmsg" => "Password expired" } } }
            if [event_data][Status] == "0xc000006d" { mutate { add_field => { "Statusmsg" => "Logon Failure" } } }
            if [event_data][Status] == "0xc000006e" { mutate { add_field => { "Statusmsg" => "Unknown username or bad password" } } }
            if [event_data][Status] == "0xc000005e" { mutate { add_field => { "Statusmsg" => "No logon servers available to login" } } }
            if [event_data][Status] == "0xc0000133" { mutate { add_field => { "Statusmsg" => "Workstation's clock out of sync with the DC" } } }
            if [event_data][Status] == "0xc00002ee" { mutate { add_field => { "Statusmsg" => "An error occured during logon" } } }
            if [event_data][Status] == "0xc000015b" { mutate { add_field => { "Statusmsg" => "Login not allowed for this system" } } }
            if [event_data][Status] == "0xc0000225" { mutate { add_field => { "Statusmsg" => "Windows bug and not a risk" } } }
            
            # Add human readable object access information.
            if [event_id] == 4663 {
                if [event_data][AccessList] =~ /%%4416/ { mutate { add_field => {"Access" => "ReadData/ListDirectory" } } }
                if [event_data][AccessList] =~ /%%4417/ { mutate { add_field => {"Access" => "WriteData/AddFile" } } }
                if [event_data][AccessList] =~ /%%4418/ { mutate { add_field => {"Access" => "AppendData/AddSubdirectory" } } }
                if [event_data][AccessList] =~ /%%4419/ { mutate { add_field => {"Access" => "Read EA" } } }
                if [event_data][AccessList] =~ /%%4420/ { mutate { add_field => {"Access" => "Write EA" } } }
                if [event_data][AccessList] =~ /%%4421/ { mutate { add_field => {"Access" => "Execute/Traverse" } } }
                if [event_data][AccessList] =~ /%%4422/ { mutate { add_field => {"Access" => "DeleteChild" } } }
                if [event_data][AccessList] =~ /%%4423/ { mutate { add_field => {"Access" => "ReadAttributes" } } }
                if [event_data][AccessList] =~ /%%4424/ { mutate { add_field => {"Access" => "WriteAttributes" } } }
                if [event_data][AccessList] =~ /%%1537/ { mutate { add_field => {"Access" => "DELETE" } } }
                if [event_data][AccessList] =~ /%%1538/ { mutate { add_field => {"Access" => "READ_CONTROL" } } }
                if [event_data][AccessList] =~ /%%1539/ { mutate { add_field => {"Access" => "WRITE_DAC" } } }
                if [event_data][AccessList] =~ /%%1540/ { mutate { add_field => {"Access" => "WRITE_OWNER" } } }
                if [event_data][AccessList] =~ /%%1541/ { mutate { add_field => {"Access" => "SYNCHRONIZE" } } }
                if [event_data][AccessList] =~ /%%1542/ { mutate { add_field => {"Access" => "ACCESS_SYS_SEC" } } }
            }
        } # End of security section
    }
}            
